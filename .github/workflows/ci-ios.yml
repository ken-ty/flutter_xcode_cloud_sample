on:
  push:

env:
  APP_BUNDLE_ID: "com.cykami.xcodeCloudSample"
  APP_NAME: "xcode_cloud_sample" 

jobs:
  build_with_signing_and_upload:
    runs-on: macos-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Get flutter version
        uses: wasabeef/import-asdf-tool-versions-action@v1.0.3
        id: asdf
      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ steps.asdf.outputs.flutter }}
          cache: true
      - name: Install dependencies
        run: |
          flutter clean
          flutter pub get
          flutter doctor -v
      - name: Run tests
        run: flutter test
      # テスト失敗時
      - name: Slack Notification on Failure
        if: failure()
        run: |
          echo "Test failed" # TODO: 具体的な通知
      # テスト成功なら、以降の処理が実行される
      # @see: https://docs.github.com/ja/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATES_P12_BASE64_DEV }}
          P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD_DEV }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_DIST_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD_DEV }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          echo "PP_NAME=$(find ~/Library/MobileDevice/Provisioning\ Profiles -type f -name '*.mobileprovision'  -exec basename {} \;)" >> $GITHUB_ENV
          echo "pp name is $PP_NAME"
      - name : Create ExportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_BUNDLE_ID: ${{ env.APP_BUNDLE_ID }}
        run: |
          ./dev_tool/create_export_options.sh --teamid="$APPLE_TEAM_ID" --provisioning-profile-name="$PP_NAME" --app-bundle-id="$APP_BUNDLE_ID"
      # ipa ファイルの出力
      - name: Create ipa file
        # GITHUB_RUN_NUMBER をビルドナンバーに指定することで被りがないようにしている。
        # 連続で実行するなどでエラーになる場合は、時間を置いてリトライしてください。
        run: flutter build ipa --export-options-plist=./ios/ExportOptions.plist --build-number ${GITHUB_RUN_NUMBER}
      - name: Detect path for ipa file
        run: |
          echo "IPA_PATH=$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_ENV
      # AppStoreConnect にアップロードする
      - name: Upload to AppStoreConnect
        run: xcrun altool --upload-app -f $IPA_PATH  --type ios --apiKey  "${{ secrets.APPLE_ASC_API_KEY }}" --apiIssuer "${{ secrets.APPLE_ASC_API_ISSUER_ID }}" --verbose

# 参考:
# https://github.com/wasabeef/import-asdf-tool-versions-action
# https://github.com/subosito/flutter-action?tab=readme-ov-file#build-for-ios
# https://zenn.dev/yorifuji/articles/build-automatically-manage-singin-on-ci
# https://qiita.com/messhi/items/cb8c6f2b4b6540995189
